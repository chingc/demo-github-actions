name: Parallel

on:
  push:
  schedule:
    - cron: "0 0 1 * *" # Midnight every month (UTC)
  workflow_dispatch:

jobs:
  collect:
    name: Collect
    runs-on: ubuntu-latest
    outputs:
      TEST_MATRIX: "${{ steps.matrix.outputs.TEST_MATRIX }}"
      FOO: "${{ steps.foo.outputs.FOO }}"
      BAR: "${{ steps.bar.outputs.BAR }}"

    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install python dependencies
        run: |
          uv python install; echo
          uv sync --locked; echo
          uv tree

      - name: Collect tests
        run: |
          uv run -- pytest --collect-only --quiet | tee collected.tmp
          echo '::group::Delete the last two lines'
          sed -e '$d' collected.tmp | sed -e '$d' | tee collected.txt
          echo '::endgroup::'

      - id: foo
        run: echo 'FOO=123' >> "${GITHUB_OUTPUT}"

      - name: Generate matrix
        id: matrix
        shell: uv run -- python {0}
        run: |
          from pathlib import Path
          from os import environ
          test_dirs = set()
          with open("collected.txt", encoding="utf-8") as lines:
            for line in lines:
              parts = line.strip().partition("::")
              test_dirs.add(str(Path(parts[0]).parent))
          test_dirs = sorted(list(test_dirs))
          print(test_dirs)
          print(environ["GITHUB_OUTPUT"])
          with open(environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as f:
            print(f'TEST_MATRIX="{test_dirs}"')
            print(f'TEST_MATRIX="{test_dirs}"', file=f)

      - id: bar
        run: echo 'BAR=456' >> "${GITHUB_OUTPUT}"

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: collect

    # strategy:
    #   matrix:
    #     os: [ubuntu-latest, macos-latest, windows-latest]
    #     node: [20, 22]

    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install python dependencies
        run: |
          uv python install; echo
          uv sync --locked; echo
          uv tree

      - name: Run test
        run: uv run -- pytest tests/test_basic.py

      - run: echo "TEST_MATRIX is '${{ needs.collect.outputs.TEST_MATRIX }}'"

      - run: echo "FOO is '${{ needs.collect.outputs.FOO }}'"
      - run: echo "BAR is '${{ needs.collect.outputs.BAR }}'"
